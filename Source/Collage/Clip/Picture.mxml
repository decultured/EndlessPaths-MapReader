<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	    xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="CreationComplete()"
		clipAndEnableScrolling="true" >
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script><![CDATA[
		import mx.events.PropertyChangeEvent;
		import mx.graphics.codec.*;
		import flash.events.*;
		import Collage.Utilities.Logger.*;
		import Collage.DataEngine.Storage.*;
		
		[Bindable] public var fileID:String = null;
		[Bindable] public var fillMode:String = "scale";
		[Bindable] public var showErrors:Boolean = false;
		[Bindable] public var showUnloadedBG:Boolean = false;
		[Bindable] public var aspectRatio:Number = 1;
		[Bindable] public var bitmapWidth:Number = 200;
		[Bindable] public var bitmapHeight:Number = 200;
		
		private var _Source:String = null;

		[Bindable]
		public function get source():String {return _Source;}
		public function set source(_src:String):void
		{
			_Source = _src;
			LoadFromURL();
		}
		
		[Bindable]private var _BitData:BitmapData = null;

		[Bindable]
		public function get bitData():BitmapData {return _BitData;}
		public function set bitData(_bitData:BitmapData):void
		{
			Logger.LogDebug("Loading Picture from BitmapData", this);
			_BitData = _bitData;
			
			if (_BitData)
				LoadFromBitmapData();
		}
		
		private var _DashboardImage:DashboardImage = new DashboardImage();
		
		private var _Loader:Loader;
		
		public function CreationComplete():void {
//			addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, ModelChanged, false, 0, true);
//			dashboardImage.addEventListener(SAVE_SUCCESS, Save_Success);
			
			if (_Source)
				LoadFromURL();
		}
		
		public function LoadFromURL():void
		{
			if (!_Source || _Source.length < 2) {
				bitData = null;
				aspectRatio = 1;
				return;
			}
				
			_Loader = new Loader();
		    _Loader.contentLoaderInfo.addEventListener(Event.COMPLETE, OnComplete);
			_Loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, ErrorHandler);
			_Loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ErrorHandler);
		    _Loader.load(new URLRequest(source));
		}
		
		private function ErrorHandler(event:Event):void {
			event.target.removeEventListener(IOErrorEvent.IO_ERROR, ErrorHandler);
			event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, ErrorHandler);
			Logger.LogError("Picture Load From URL Error: " + event, this);
			bitData = null;
			aspectRatio = 1;
		}
		
		private function OnComplete(event:Event):void
		{
		    _Loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, OnComplete);
		    _BitData = Bitmap(LoaderInfo(event.target).content).bitmapData;
		
			if (_BitData) {
				bitmapWidth = _BitData.width;
				bitmapHeight = _BitData.height;
			}
			if (bitmapHeight)
				aspectRatio = bitmapWidth / bitmapHeight;
			else
				aspectRatio = 1;
		
			if (!fileID && _BitData && _Source.substring(0, 7) == "file://") {
				var pngEncoder:PNGEncoder = new PNGEncoder();
				_DashboardImage.Filedata = pngEncoder.encode(_BitData);
				_DashboardImage.addEventListener(CloudFile.SAVE_SUCCESS, CloudFile_SaveAttachment_SuccessEvent);
				_DashboardImage.addEventListener(CloudFile.SAVE_FAILURE, CloudFile_SaveAttachment_FailureEvent);
				_DashboardImage.Save();
			}
		}

		public function LoadFromBitmapData():void
		{
			Logger.LogDebug("Loading Picture from BitmapData", this);
			if (_BitData) {
				bitmapWidth = _BitData.width;
				bitmapHeight = _BitData.height;
			}
			if (bitmapHeight)
				aspectRatio = bitmapWidth / bitmapHeight;
			else
				aspectRatio = 1;

			if (!fileID && _BitData) {
				var pngEncoder:PNGEncoder = new PNGEncoder();
				_DashboardImage.Filedata = pngEncoder.encode(_BitData);
				_DashboardImage.addEventListener(CloudFile.SAVE_SUCCESS, CloudFile_SaveAttachment_SuccessEvent);
				_DashboardImage.addEventListener(CloudFile.SAVE_FAILURE, CloudFile_SaveAttachment_FailureEvent);
				_DashboardImage.Save();
			}
		}
		
		public function CloudFile_SaveAttachment_SuccessEvent(event:Event):void {
			Logger.Log("Saved image to cloud.", this);
			
			fileID = _DashboardImage.ID;
			source = _DashboardImage.URL;
		}
		
		public function CloudFile_SaveAttachment_FailureEvent(event:Event):void {
			Logger.LogError("Failure saving image to cloud.", this);
		}
	]]></fx:Script>
	<s:Rect width="100%" height="100%" visible="{showUnloadedBG &amp;&amp; !_BitData}" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry alpha="0.5" color="#E2E2E2" ratio="0"/>
				<s:GradientEntry alpha="0.5" color="#B7B7B7" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:BitmapImage id="errorImg" visible="{showErrors &amp;&amp; !_BitData}" source="@Embed('/Assets/icons/unknown.png')" horizontalCenter="0" verticalCenter="0" minWidth="5" minHeight="5" />
	<s:BitmapImage id="bmpImg" source="{_BitData}" fillMode="{fillMode}" horizontalCenter="0" verticalCenter="0" width="100%" height="100%" smooth="true" minWidth="5" minHeight="5" />
</s:Group>